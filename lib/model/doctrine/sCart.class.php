<?php

/**
 * sCart
 *
 * @method sCart CartAdd() Добавляет новую позицию в корзину пользователя
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    merrymall
 * @subpackage model
 * @author     Wronglink
 * @version    SVN: $Id: Builder.php 7021 2010-01-12 20:39:49Z lsmith $
 */

class sCart extends BasesCart
{
  /**
   * Добавляет новую позицию в корзину или увеличивает количество существующей позиции
   *
   * @property integer $item_id
   * @property integer $count
   * @property integer $user_id
   */
  public function addCartItem($item_variant, $count) {

    if($cart_item = Doctrine::getTable('sCart')->findCartItemByItemVariantIdWithUserNotOdered($item_variant['iv_id']))
    {
      $count = $cart_item->getCount() + $count;
      $cart_item->setCount($count);
      $cart_item->save();

      return array('id' => $cart_item->id, 'count' => $count, 'exist' => true);
    }
    else {
      $this->setItemVariantId($item_variant['iv_id']);
      $this->setCompanyId($item_variant['iv_company_id']);
      $this->setUserId(sfContext::getInstance()->getUser()->getAttribute('user_id','none','sfGuardSecurityUser'));
      $this->setPrice($item_variant['iv_price']);
      $this->setCount($count);
      $this->save();

      return array('exist' => false,
      			   'id' => $this->id,
      			   'count' => $this->count,
      );
    }
  }

  public function getSum() {
    return $this->getCount()*$this->getPrice();
  }

  public function moveToWishlist($s_cart, Doctrine_Connection $conn = null, $user_id, $item_variant_id) {
    $conn = $conn ? $conn : Doctrine::getTable('sCart')->getConnection();

    if(Doctrine::getTable('sWishlist')->findByItemVariantIdAndUserId($item_variant_id,$user_id))
    {
      $s_cart->delete();
      return 'no_refresh_wishlist';
    }

    $wishlist = new sWishlist();

    $conn->beginTransaction();
    try
    {
      $wishlist->addWishlist($item_variant_id,$user_id);
      $s_cart->delete();
      $conn->commit();
    }
    catch(Doctrine_Exception $e)
    {
      $conn->rollBack();
      throw $e;
    }

    return 'refresh_wishlist';

  }

  public static function countCartItems($user_id)
  {
    return $this->getTable()
    ->findAllByUserIdNotOrdered($user_id)
    ->count();
  }

  /**
   * Сохраняет в базу изменения по количеству товаров
   * @param Array $cartCounts
   */
  public function saveCartCounts($cartCounts = array())
  {
    $conn = $conn ? $conn : Doctrine::getTable('sCart')->getConnection();

    $conn->beginTransaction();

    try
    {

      $conn->commit();
    }

    catch(Doctrine_Exception $e)
    {
      $conn->rollBack();
      throw $e;
    }

    return true;
  }

}
